// Login Register Component

import * as React from 'react'
import { observer } from 'mobx-react'
import { withInjection } from '../Core/WithPresenter'
import { LoginRegisterPresenter } from './LoginRegisterPresenter'

const LoginRegisterComp = observer((props) => {
  return (
    <>
      <div className="logo">
        <img
          alt="logo"
          style={{ width: 60, filter: 'grayscale(100%)' }}
          src="https://kajabi-storefronts-production.global.ssl.fastly.net/kajabi-storefronts-production/themes/1537017/settings_images/1UxqoCceShyczTsmzsLy_logo.png"
        />
      </div>
      <div className="option">
        <input
          style={{ backgroundColor: '#e4257d' }}
          type="submit"
          value="login"
          onClick={() => {
            props.presenter.option = 'login'
          }}
        />
        <input
          style={{ backgroundColor: '#2E91FC' }}
          type="submit"
          value="register"
          onClick={() => {
            props.presenter.option = 'register'
          }}
        />
      </div>
      <div
        className="login-register"
        style={{
          backgroundColor: props.presenter.option === 'login' ? '#E4257D' : '#2E91FC'
        }}
      >
        <form
          className="login"
          onSubmit={(event) => {
            event.preventDefault()
            if (props.presenter.option === 'login') props.presenter.login()
            if (props.presenter.option === 'register') props.presenter.register()
          }}
        >
          <label>
            <input
              type="text"
              value={props.presenter.email}
              placeholder="Email"
              onChange={(event) => {
                props.presenter.email = event.target.value
              }}
            />
          </label>
          <label>
            <input
              type="text"
              value={props.presenter.password}
              placeholder="Password"
              onChange={(event) => {
                props.presenter.password = event.target.value
              }}
            />
          </label>
          {props.presenter.option === 'login' ? (
            <input type="submit" value="login" />
          ) : (
            <input type="submit" value="register" />
          )}
        </form>

        <div className="validation-message">
          {props.presenter.showValidationMessage && props.presenter.validationMessage}
        </div>
      </div>
    </>
  )
})

export const LoginRegisterComponent = withInjection({
  presenter: LoginRegisterPresenter
})(LoginRegisterComp)


// NavigationContainer (First Level)

import * as React from 'react'
import { observer } from 'mobx-react'
import { LogoutComponent } from '../../Authentication/LogoutComponent'
import { withInjection } from '../../Core/WithPresenter'
import { CurrentPagePresenter } from '../../CurrentPagePresenter'
import { NavigationPresenter } from '../NavigationPresenter'
import { NavigationCollapseComponent } from './NavigationCollapseComponent'
import { NavigationOpenListComponent } from './NavigationOpenListComponent'
import { NavigationBackToTopComponent } from './NavigationBackToTopComponent'

export const NavigationContainerComp = observer((props) => {
  return (
    <>
      <div className="navigation-container">
        <>
          <div className="navigation-item" style={{ backgroundColor: '#5BCA06' }}>
            {props.NavigationPresenter.findCurrentNode().model.text} >{' '}
            {props.NavigationPresenter.findCurrentNode().model.id}
          </div>
          {props.NavigationPresenter.findCurrentNode().children.map((node, i) => {
            if (node.model.type === 'expand') {
              return <NavigationCollapseComponent key={i} node={node} />
            } else return <NavigationOpenListComponent key={i} node={node} />
          })}
        </>

        {!props.NavigationPresenter.isTop && <NavigationBackToTopComponent />}

        <LogoutComponent />
      </div>
    </>
  )
})

export const NavigationContainerComponent = withInjection({
  CurrentPagePresenter: CurrentPagePresenter,
  NavigationPresenter: NavigationPresenter
})(NavigationContainerComp)


// NavigationExpandComponent (Second Level)

import React, { useState } from 'react'
import { observer } from 'mobx-react'
import { withInjection } from '../../Core/WithPresenter'
import { NavigationPresenter } from '../NavigationPresenter'
import { Router } from '../../Routing/Router'

export const NavigationExpandComp = observer((props) => {
  const [showInfo, setShowInfo] = useState(true)

  return (
    <>
      <div
        className="navigation-item"
        style={{ backgroundColor: '#2e91fc' }}
        onClick={() => {
          setShowInfo(!showInfo)
        }}
      >
        {(showInfo && '[-]') || '[+]'}
        {props.node.model.text}
      </div>
      {props.node.children.map((node, i) => (
        <div
          className="navigation-item"
          style={{
            display: showInfo ? 'block' : 'none',
            backgroundColor: '#E4257D'
          }}
          key={i}
          onClick={() => {
            props.Router.goToId(node.model.id)
          }}
        >
          {node.model.text}
        </div>
      ))}
    </>
  )
})

export const NavigationExpandComponent = withInjection({
  NavigationPresenter: NavigationPresenter,
  Router: Router
})(NavigationExpandComp)

// NavigationOpenListComponent (Third Level)

import * as React from 'react'
import { observer } from 'mobx-react'
import { withInjection } from '../../Core/WithPresenter'
import { NavigationPresenter } from '../NavigationPresenter'
import { Router } from '../../Routing/Router'

export const NavigationOpenListComp = observer((props) => {
  return (
    <>
      <div
        className="navigation-item"
        style={{
          backgroundColor: props.node.model.type === 'link' ? '#E4257D' : '#3DE7CF'
        }}
        onClick={() => {
          if (props.node.model.type === 'link') {
            props.Router.goToId(props.node.model.id)
          } else {
            props.node.model.func()
          }
        }}
      >
        {props.node.model.text}
      </div>
    </>
  )
})

export const NavigationOpenListComponent = withInjection({
  NavigationPresenter: NavigationPresenter,
  Router: Router
})(NavigationOpenListComp)
